{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
\f3\fnil\fcharset77 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 // (070518f - after SC workshop at Helmholtz Workshop, HUB - Berlin)\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf3 Creating and Accessing NodeProxies in an Array\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs18 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 previous: [JITLib reference sheet.rtf] \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf3 \
(see: [
\f3\fs24 \ul jitlib_basic_concepts_03\ulnone ])
\f0\fs18 \
\
p = \cf4 ProxySpace\cf3 .push(s.boot); \cf2 // store proxy space in p so it can be accessed easily.
\f2\fs24 \cf3 \

\f0\fs18 \
\cf2 // An array of NodeProxies can be created on the fly\cf3 \
~z[1..4] = \{ \cf4 SinOsc\cf3 .ar(exprand(300, 600), 0, \cf4 LFTri\cf3 .kr(\{exprand(1, 3)\} ! 3).sum.max(0)) * 0.1 \};\
~z.play;	\cf2 // and all of the proxies played at once\cf3 \
\cf2 // adding a proxy to an emtpy slot starts playing it if the whole proxy is playing\cf3 \
~z[0] = \{ \cf4 Mix\cf3 .ar(\cf4 Ringz\cf3 .ar(\cf4 Decay2\cf3 .ar(\cf4 Impulse\cf3 .ar(3, 0, 1), 0.2), [500, 700, 800], 0.4)) \};\
~z[0] = \cf4 nil\cf3 ; 	\cf2 // storing nil in a slot stops and clears its previous contents\cf3 \
~z.end;	\cf2 // All proxies of the array stopped at once\cf3 \
\
\cf2 // if no slot is given, all other slots are emptied\cf3 \
~z.play;	\cf2 // start again first\cf3 \
~z = \{\'ca\cf4 OnePole\cf3 .ar(\cf4 Saw\cf3 .ar([400, 401.3], 0.3), 0.95) \};\
\cf2 // If additional slots are given, they are added\cf3 \
~z[1..] = [ \{\cf4 SinOsc\cf3 .ar(440) * 0.1 \}, \{ \cf4 SinOsc\cf3 .ar(870) * 0.08 \}, \{ \cf4 SinOsc\cf3 .ar(770) * 0.04 \}];\
~z.end;\
\
\
\
}