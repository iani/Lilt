{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 /* iz Tuesday; January 12, 2010: 1:57 PM\
How to use Pfuncn inside other patterns? \
*/\cf0 \
\
\cf2 // 2 first tries... nothing in particular ...\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 (\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sides = [10, 20, 30, 40, 50].scramble;\
	\cf3 Pseq\cf0 (sides collect: \{ \cf3 | ms |\cf0 \
		\cf3 Pfuncn\cf0 (\{ t.turn(2 * pi / (ms + 3)); t.move(ms, 1) \}, 10)\
	\}, 5) \
	\},  rate: 0);\
)	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 (\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sides = [5, 20, 30, 40, 50];\
	\cf3 var\cf0  turn = 0.4;\
	\cf3 Pseq\cf0 (\{ \
		sides = sides.scramble * [1, -1].choose;\
		\cf3 Pseq\cf0 (sides collect: \{ \cf3 | ms |\cf0 \
			\cf3 Pfuncn\cf0 (\{ t.turn(turn * 2 * pi / (ms + 3)); t.move(ms, 1) \}, 10) \})\
		\} ! 40, 1) \
	\},  rate: 0);\
)	\
\
\
\pard\pardeftab560\ql\qnatural
\cf2 // Now more focussed patterns: \cf0 \
\
\cf2 // We are trying to draw a spiral of sorts several times, while changing the direction of \cf0 \
\cf2 // turn of the spiral at each new spiral. \cf0 \
\
\cf2 // First a wrong way - it always produces the same figure\cf0 \
\cf2 // This is because the value of "turn" that is used by Pfuncn is only the *last* one, \cf0 \
\cf2 // Pecause the function of Pfuncn is evaluated _after_ the Pfuncn is created. \cf0 \
\cf2 // So, this is not the right way, see below how to do it right\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  turn;\
	\cf3 Pseq\cf0 (\{ \
		\cf3 Pseq\cf0 ((1..10) collect: \{ \cf3 | ms |\cf0 \
			turn = [-pi / 6, pi / 6].choose.postln;\
			\cf3 Pfuncn\cf0 (\{ t.turn(turn); t.move(ms, 1) \}, 5) \})\
		\} ! 10, 1) \
	\},  rate: 0);\
)\
\
\
\cf2 // This is the right way because now we can vary the turn angle with a stream\cf0 \
\cf2 // Preparatory. We are not yet varying the angle here.\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  metagonSide, side;\
	metagonSide = \cf3 Pn\cf0 (\cf3 Pseries\cf0 (1, 1, 10)).asStream;\
	\cf3 Pn\cf0 (\
		\cf3 Plazy\cf0 (\{\
			side = metagonSide.next;	\cf2 // this will work because it is inside Plazy\cf0 \
			\cf3 Pfuncn\cf0 (\{ t.turn(pi / 6); t.move(side, 1) \}, 5)\
		\})\
	, 100)\
\},  x: 400, y: 400,rate: 0);\
)	\
\
\cf2 // Half-way to the solution: Here is how we vary the turn angle with a stream\cf0 \
\cf2 // We vary at every 5th vertex, instead of at every complete spiral\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sideStream, side;\
	\cf3 var\cf0  turnStream, turn;\
	sideStream = \cf3 Pn\cf0 (\cf3 Pseries\cf0 (1, 1, 10)).asStream;\
	turnStream = \cf3 Prand\cf0 ([-pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pn\cf0 (\
		\cf3 Plazy\cf0 (\{\
			side = sideStream.next;\
			turn = turnStream.next;\
			\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(side, 1) \}, 5)\
		\})\
	, 100)\
\},  x: 400, y: 400,rate: 0);\
)	\
	\
\
\cf2 // Now the solution: Varying at every complete spiral\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sideStream, side;\
	\cf3 var\cf0  turnStream, turn;\
	sideStream = \cf3 Pn\cf0 (\cf3 Pseries\cf0 (1, 1, 10)).asStream;\
	turnStream = \cf3 Prand\cf0 ([-pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pn\cf0 (\
		\cf3 Plazy\cf0 (\{\
			turn = turnStream.next;\
			\cf3 Pn\cf0 (\
				\cf3 Plazy\cf0 (\{\
					side = sideStream.next;\
					\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(side, 1) \}, 5);\
				\})\
			, 10)\
		\})\
	, 70)\
\},  x: 400, y: 400,rate: 0);\
)\
\
\
\cf2 // A regular pattern built on the same principle\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sideStream, side;\
	\cf3 var\cf0  turnStream, turn;\
	sideStream = \cf3 Pn\cf0 (\cf3 Pseries\cf0 (1, 1, 10)).asStream; \cf2 // Pn repeats infinitely per default\cf0 \
	turnStream = \cf3 Pseq\cf0 ([-pi / 6, pi / 6, pi / 6, -pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pn\cf0 (\
		\cf3 Plazy\cf0 (\{\
			turn = turnStream.next;\
			\cf3 Pn\cf0 (\
				\cf3 Plazy\cf0 (\{\
					side = sideStream.next;\
					\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(side, 1) \}, 5);\
				\})\
			, 10)\
		\})\
	, 70)\
\},  x: 400, y: 400,rate: 0);\
)\
\
\cf2 // and another ...\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sideStream, side;\
	\cf3 var\cf0  turnStream, turn;\
	sideStream = \cf3 Pn\cf0 (\cf3 Pseries\cf0 (1, 1, 10)).asStream;\
	turnStream = \cf3 Pseq\cf0 ([-pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pn\cf0 (\
		\cf3 Plazy\cf0 (\{\
			turn = turnStream.next;\
			\cf3 Pn\cf0 (\
				\cf3 Plazy\cf0 (\{\
					side = sideStream.next;\
					\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(side, 1) \}, 5);\
				\})\
			, 10)\
		\})\
	, 70)\
\},  x: 400, y: 400,rate: 0);\
)\
\
\cf2 // and yet another ...\cf0 \
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  sideStream, side;\
	\cf3 var\cf0  turnStream, turn;\
	\cf3 var\cf0  left, right;\
	left = pi / 6;\
	right = left.neg;\
	sideStream = \cf3 Pn\cf0 (\cf3 Pseries\cf0 (1, 1, 10)).asStream;\
	\cf2 // This stream produces the series: l r r l r l r r l r l r l r r l r l r l r l r r ...\cf0 \
	turnStream = p(\{ 	\cf2 // This creates a Prout\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		\cf3 var\cf0  n = 0;\
		loop \{\
			n = n + 1;\
			n do: \{ left.yield; right.yield \};\
			right.yield;\
		\};	\
	\}).asStream;\
\pard\pardeftab560\ql\qnatural
\cf0 	\cf3 Pn\cf0 (\
		\cf3 Plazy\cf0 (\{\
			turn = turnStream.next;\
			\cf3 Pn\cf0 (\
				\cf3 Plazy\cf0 (\{\
					side = sideStream.next;\
					\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(side, 1) \}, 5);\
				\})\
			, 10)\
		\})\
	, 150)\
\},  x: 400, y: 400,rate: 0);\
)\
\
\pard\pardeftab560\ql\qnatural
\cf2 // Some other simple variations\cf0 \
\
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  metagonSide = 64;\
	\cf3 var\cf0  side;\
	metagonSide = \cf3 Pwhite\cf0 (1, 20, \cf3 inf\cf0 ).asStream;\
	\cf3 Pn\cf0 (\cf3 Plazy\cf0 (\{ \cf3 | i |\cf0 \
		side = metagonSide.next.postln;\
		\cf3 Pfuncn\cf0 (\{ t.turn(2pi / 10); t.move(side, 1) \}, 12)\
	\}), 5)\
	\},  x: 400, y: 400,rate: 0);\
)	\
\
\
\
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  turn;\
	\cf3 var\cf0  ms = 10;\
	turn = \cf3 Prand\cf0 ([-pi / 6, pi / 6, pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pseq\cf0 (\{ \
		\cf3 Pseq\cf0 ((1..10) collect: \{ \cf3 | ms |\cf0 \
			\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(ms, 1) \}, 5) \})\
		\} ! 10, 1) \
	\},  rate: 0);\
)\
\
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  turn;\
	\cf3 var\cf0  ms = 100;\
	\cf3 var\cf0  turnstream;\
	turnstream = \cf3 Prand\cf0 ([-pi / 6, pi / 6, pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pseq\cf0 (\{\
		turn = turnstream.next;\
		\cf3 Pseq\cf0 ((1..10) collect: \{ \cf3 | ms |\cf0 \
			\cf3 Pfuncn\cf0 (\{ t.turn(turn); t.move(ms, 1) \}, 5) \})\
		\} ! 10, 1) \
	\},  rate: 0);\
)\
\
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  turn;\
	\cf3 var\cf0  ms = 100;\
	\cf3 var\cf0  turnstream;\
	turnstream = \cf3 Prand\cf0 ([-pi / 6, pi / 6, pi / 6, pi / 6], \cf3 inf\cf0 ).asStream;\
	\cf3 Pseq\cf0 (\{\
\cf2 //		turn = turnstream.next;\cf0 \
		\cf3 Pseq\cf0 ((1..10) collect: \{ \cf3 | ms |\cf0 \
			\cf3 Pfuncn\cf0 (\{ t.turn(turnstream.next); t.move(ms, 1) \}, 5) \})\
		\} ! 10, 1) \
	\},  rate: 0);\
)\
\
\
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  turn;\
	\cf3 var\cf0  ms = 10;\
	\cf3 Pseq\cf0 (\{ \
		\cf3 Pseq\cf0 ((1..10) collect: \{ \cf3 | ms |\cf0 \
			turn = [-pi / 6, pi / 7, -pi / 7, pi / 6].choose.postln;\
			\cf3 Pfuncn\cf0 (\{ t.turn(turn); t.move(ms, 1) \}, 5) \})\
		\} ! 10, 1) \
	\},  rate: 0);\
)	\
\
(\
t = \cf3 Turtle\cf0 .draw(\{ \cf3 | t |\cf0 \
	\cf3 var\cf0  turn;\
	\cf3 var\cf0  ms = 10;\
	turn = \cf3 Pseq\cf0 ([pi / 3, -pi / 3], 10).asStream;\
	\cf3 Pfuncn\cf0 (\{ t.turn(turn.next); t.move(ms, 1) \}, 25);\
	\},  rate: 0);\
)	\
}