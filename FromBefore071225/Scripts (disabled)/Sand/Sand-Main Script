/* (IZ 2006-01-17) { 
Creates session including all scripts used for sand pieces 
(Jean Pierre Hebert + Iannis Zannos). 

Do not edit this file. To load samples and specify score and listener, edit the script in:
/Scripts/Sand/config
} */

// local variables for important objects:
var session, samples, scripts;
var listener, score, scoreRules, conductor, envir;

// Set up: 
// place the start button out of the way: 
~script.guiBounds = Rect(0, 350, 200, 27).fromTop.fromRight;
Script.addGlobalScript('main', ~script); 	// make this script global under 'main'

// Session.makeGui; 	// always open Session main window

// create a "method" for starting a piece with new score
envir = ~script.envir;
~startScore = { | scorePath |
	var thePath;
	{
	envir.script.postln.stop;
	// first try to get the path as relative to /Scripts/Sand/
	thePath = ScriptBrowser.getScriptPath('Sand', scorePath.asSymbol);
	// if not found in Sand, use this as absolute path:
	if (thePath.isNil) { thePath = scorePath };
	envir[\scorePath] = thePath.asString;
	Post << "STARTING NEW PIECE: " << thePath << "\n";
	envir.script.start;
	}.defer;	// defer to make playable from OSC
};

////////////////////// 2. MAIN SCRIPT
~start = {
	session = Session('Sand'); // CREATE SESSION
	Script.putGlobal(\session, session); // make session global
	
	///// config specifies which listener and score files + which samples to load
	Script.loadRaw('Sand', 'config');
	
	Post << 'Score: ' << ~scorePath << "\nListener: " << ~listenerPath << "\n";
	session.addScriptGroup("Scripts");
	listener = Session.addScript(Script.load(~listenerPath).first);
	// make envir of listener available globally, for access inside streams
	// of patterns (Pactions etc) used in score's conductor rules
	Script.putGlobal(\envir, listener.envir);
	score = Session.addScript(Script.load(~scorePath).first);
	
	conductor = score.envir[\conductor];			// get conductor from score
	scoreRules = listener.envir.scoreRules;
	conductor.asArray do: { | rule |	// connect score rules to data reception
		scoreRules.add(rule);
	};

	scripts = session.scriptGroups.selection;
//	scripts.makeGui;	// make gui of current script group;
	scripts.list.do { |s| s.makeGui }; // make guis for all scripts in session
		listener.start;	// start listening to data from sand (python)
		session; 			// return session so as to remove it on stopping

};

~stopMessage = \remove; // Remove session when this script is stopped


